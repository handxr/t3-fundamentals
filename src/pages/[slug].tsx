import { api } from "@/utils/api";
import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";

const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading) return <LoadingPage />;

  if (!data) return null;

  return (
    <ul className="flex flex-col">
      {data.map((post) => (
        <PostView key={post.post.id} {...post} />
      ))}
    </ul>
  );
};

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data, isError, error } = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (isError) return <p>{error.message}</p>;

  if (!data) return null;

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className=" relative h-32 border-b border-slate-400 bg-slate-600">
          <Image
            src={data.profilePicture}
            alt={`${data.username ?? ""}'s Profile Image`}
            className="absolute bottom-0 left-0 -mb-[24px] ml-4 h-24 w-24 rounded-full border-4 border-black"
            width={128}
            height={128}
          />
        </div>
        <div className="h-[32px]" />
        <div className="p-4 text-2xl font-bold">{`@${
          data.username || ""
        }`}</div>
        <div className="w-full border-b border-slate-400"></div>
        <ProfileFeed userId={data.id} />
      </Layout>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import superjson from "superjson";
import { Layout, LoadingPage, PostView } from "@/components";
import Image from "next/image";

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctx: { prisma, session: {} as any },
    transformer: superjson, // optional - adds superjson serialization
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("slug is not a string");

  const username = slug.replace("@", "");

  await helpers.profile.getUserByUsername.prefetch({ username });
  await helpers.posts.getPostsByUserId.prefetch({ userId: username });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
